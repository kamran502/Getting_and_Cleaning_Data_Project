x <- 1:4
x
y <- 2
y
x+y
x <- list(2, "a", "b", TRUE)
x[[1]]
x <- c(17, 14, 4, 5, 13, 12, 10)
x
x[x > 10] <- 4
x
x <- 1:4
y <- 6:9
x
y
x+y
y == 9
R.version.string
install.packages("swirl")
install_from_swirl(R Programming")
install_from_swirl("R Programming")
library(swirl)
swirl()
install_from_swirl("R Programming")
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
y <- x-3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?
?c
?c
z
z, 555, z
vector (z, 555, z)
c(z, 555, z)
z*2*100
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
q()
ls
debug (ls)
ls
?iris
ls
library(datasets)
ls
data(iris)
iris
iris
colmean <- apply(iris, 1, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
mean (iris[["Sepal.Length"]])
mean (iris[["Sepal.Length"]])
mean (iris[[1]])
mean (iris[[2]])
mean (iris[[3]])
mean (iris[[4]])
colMeans(iris)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],3,mean)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
apply(iris,1,mean)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],2,mean)
mean (iris[["Sepal.Length"]])
mean (iris[["virginica"]])
mean (iris[["Sepal.Length","virginica"]])
mean (iris[["Sepal.Length"]])
head(iris)
split(iris, iris$Species)
split(iris, iris$Species)
undebug()
undebug(ls)
debug(ls)
ls
ls
data(mtcars)
mtcars
data(iris)
split(iris, iris$Species)
split(iris, iris$Species$virginica)
split(iris, iris$Species="virginica")
split(iris, iris$Species$virginica)
flowers = as.data(iris)
flowers = data(iris)
flowers
split(iris, iris$Species)
iris.filtered = iris[Species == "virginica",]
mean (iris[["Sepal.Length"]])
mean (iris["Sepal.Length"])
mean (iris[["Sepal.Length", by="Species"]])
mean (iris[["Sepal.Length"], by="Species"])
mean (iris[["Sepal.Length", by="SpeciesSepal.Length"]])
aggregate (Sepal.Length, iris, mean)
aggregate ("Sepal.Length", iris, mean)
aggregate ("Sepal.Length", data.iris, mean)
aggregate ("Sepal.Length", data(iris), mean)
aggregate (Sepal.Length~Species, iris, mean)
aggregate (Sepal.Length~Species, iris, mean, Species)
aggregate (Sepal.Length~Species, iris, mean, "Species")
aggregate (Sepal.Length~Species, iris, mean, by=virginica)
aggregate (Sepal.Length~Species, iris, mean, by="virginica")
aggregate (Sepal.Length~Species, iris, mean, 3)
aggregate (Sepal.Length~Species, iris, mean, 4)
aggregate (Sepal.Length~Species, iris, mean, 1)
aggregate (Sepal.Length~Species, iris, mean, 2)
aggregate (Sepal.Length~Species, iris, mean)
max(iris[1,])
apply(iris,1,max)
apply(iris,2,max)
apply(iris,2,mean)
apply(iris,2,mean,1)
apply(iris,2,mean,2)
aggregate (Sepal.Length~Species, iris, mean)
apply(iris,2,max)
apply(iris,1,max)
apply(iris,2,max)
apply(iris,Sepal.Length,max)
apply(iris,"Sepal.Length",max)
class(iris)
apply(iris,1,max)
apply(iris,2,mean)
apply(iris,1,mean)
apply(iris[,1:5],1,mean)
apply(iris[,1:4],1,mean)
apply(iris[,1],1,mean)
apply(iris,1,mean)
apply(iris,1,1,mean)
apply(iris,2,1,mean)
apply(iris,2,mean,2)
apply(iris,2,mean)
aggregate ("Sepal.Length", iris, mean)
apply(iris[,1:4],1,mean)
apply(iris[,-1],1,mean)
apply(iris[,-5],1,mean)
apply(iris[,-c(5)],1,mean)
apply(iris[,-c(2,3,4,5)],1,mean)
apply(iris[,-c(3,4,5)],1,mean)
apply(iris[,-5],1,mean)
apply(iris[,-5],1,mean,na.rm=TRUE)
apply(iris[,1:4],1,mean)
apply(iris,1,mean)
rowMeans(iris[,1:4])
colMeans(iris)
apply(iris[,1:4],2,mean)
data(mtcars)
mtcars
apply(mtcars[,1:4],1,mean)
apply(mtcars[,2:4],1,mean)
apply(mtcars[,2:3],1,mean)
apply(mtcars[,2:3],2,mean)
apply(mtcars[,2,3],2,mean)
apply(mtcars[,2:3],2,mean)
apply(mtcars[,1:2],2,mean)
aggregate ("cyl", mtcars, mean)
aggregate ("Sepal.Length", iris, mean)
aggregate (Sepal.Length~Species, iris, mean)
aggregate (mpg~cyl, mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$hp, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
abs(5,1)
abs(1)
abs(2)
tapply(mtcars$hp, mtcars$cyl, mean)
abs(tapply(mtcars$hp, mtcars$cyl, mean))
tapply(mtcars$hp, mtcars$cyl, mean)
matrix(tapply(mtcars$hp, mtcars$cyl, mean),1)
matrix(tapply(mtcars$hp, mtcars$cyl, mean))
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)+2
x<- tapply(mtcars$hp, mtcars$cyl, mean)+2
x
x(1)
x(1:1)
x(1,1)
x
apply(x,1:2,sum)
apply(x[,1:2],1,sum)
apply(x[,1:2],1,mean)
apply(x[,1:2],2,mean)
apply(x[,2],1,mean)
tapply(mtcars$hp, mtcars$cyl, mean)
debug(ls)
ls
undebug(ls)
ls
data(iris)
aggregate ("Sepal.Length", iris, mean)
aggregate (Sepal.Length~Species, iris, mean)
apply(iris[, 1:4], 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
q()
ls
dir()
cd Coursera
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
q()
read.csv("getdata-data-ss06pid.csv")
acs <- read.csv("getdata-data-ss06pid.csv")
library(plyr)
x_train <- read.table("train/X_train.txt")
y_train <- read.table("train/y_train.txt")
subject_train <- read.table("train/subject_train.txt")
setwd("C:/Users/kamran/Documents/Coursera/3_Cleaning_Data/Week4/Assignment")
x_train <- read.table("train/X_train.txt")
x_train <- read.table("./Dataset/train/X_train.txt")
y_train <- read.table("./Dataset/train/y_train.txt")
subject_train <- read.table("./Dataset/train/subject_train.txt")
x_test <- read.table("./Dataset/test/X_test.txt")
y_test <- read.table("./Dataset/test/y_test.txt")
subject_test <- read.table("./Dataset/test/subject_test.txt")
x_data <- rbind(x_train, x_test)
rm("x_data")
x <- rbind(x_train, x_test)
y <- rbind(y_train, y_test)
subject <- rbind(subject_train, subject_test)
features <- read.table("features.txt")
features <- read.table("./Dataset/features.txt")
mean_stddv <- grep("-(mean|std)\\(\\)", features[, 2])
x <- x[, mean_stddv]
head(x)
names(x) <- features[mean_stddv, 2]
head(x)
activities <- read.table("activity_labels.txt")
activities <- read.table("./Dataset/activity_labels.txt")
activities
y[, 1] <- activities[y[, 1], 2]
head(y)
tail(y)
names(y) <- "activity"
tail(y)
head(subject)
names(subject_data) <- "subject"
names(subject) <- "subject"
head(subject)
data <- cbind(x, y, subject)
averages_data <- ddply(data, .(subject, activity), function(x) colMeans(x[, 1:66]))
write.table(averages_data, "averages_data.txt", row.name=FALSE)
source("run_analysis.R")
